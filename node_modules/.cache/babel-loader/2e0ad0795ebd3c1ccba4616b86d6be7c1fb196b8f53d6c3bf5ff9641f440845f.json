{"ast":null,"code":"export const fetchSheetData = async () => {\n  const sheetUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vQWjDAx17rze56_4sq8mIxro5u1-lTVS6MYe3v6wDqrbG12ARK3b_lPI387qJIfl56fCjHaHEHXQsfi/pub?output=csv\";\n  try {\n    const response = await fetch(sheetUrl);\n    if (!response.ok) throw new Error(`Error ${response.status} al cargar datos del CSV.`);\n    const csvData = await response.text();\n    const lines = csvData.split('\\n').filter(line => line.trim() !== '');\n    if (lines.length < 2) throw new Error('La hoja no contiene datos o solo tiene encabezados.');\n\n    // Mapeo de encabezados de columna a nombres de campo internos\n    // Asegúrate de que estos nombres coincidan con los de tu hoja, en minúsculas\n    const rawHeaders = lines[0].split(',').map(h => h.trim().replace(/\"/g, '').toLowerCase());\n\n    // Definimos un mapeo explícito de los encabezados de tu hoja a nombres de campo internos\n    // Esto es CRÍTICO para la consistencia\n    const headerMap = {\n      'posición categoria': 'posicion_categoria',\n      // Columna A\n      'dorsal': 'dorsal',\n      'posición genero': 'posicion_genero',\n      // Columna C\n      'posición general': 'posicion_general',\n      // Columna D\n      'nombre': 'nombre',\n      'categoria': 'categoria',\n      'tiempo': 'tiempo',\n      // Columna G\n      'tiempo chip': 'tiempo_chip',\n      // Columna H\n      'club': 'club',\n      // Columna I\n      'foto_url': 'foto_url',\n      'certificado_url': 'certificado_url',\n      'evento': 'evento',\n      'distancia': 'distancia',\n      // Columna M\n      'deporte': 'deporte',\n      // Si tienes vueltas, asegúrate de que los encabezados sean 'vuelta_1', 'vuelta_2', etc.\n      'vuelta_1': 'vuelta_1',\n      'vuelta_2': 'vuelta_2',\n      'vuelta_3': 'vuelta_3',\n      'vuelta_4': 'vuelta_4',\n      'vuelta_5': 'vuelta_5'\n      // Añade más vueltas si es necesario\n    };\n\n    // Crear los encabezados finales usando el mapeo\n    const headers = rawHeaders.map(rawHeader => headerMap[rawHeader] || rawHeader);\n    return lines.slice(1).map(line => {\n      const values = line.split(',');\n      const rowData = {};\n      headers.forEach((header, index) => {\n        let value = values[index] ? values[index].trim().replace(/\"/g, '') : '';\n\n        // Convertir a número si es posible y si no es una URL\n        if (!isNaN(value) && value !== '' && !value.startsWith('http')) {\n          value = Number(value);\n        }\n        rowData[header] = value;\n      });\n      return rowData;\n    });\n  } catch (error) {\n    console.error('Error en fetchSheetData:', error);\n    throw new Error('No se pudieron cargar los datos. Verifica que la hoja sea pública y tenga el formato CSV correcto.');\n  }\n};","map":{"version":3,"names":["fetchSheetData","sheetUrl","response","fetch","ok","Error","status","csvData","text","lines","split","filter","line","trim","length","rawHeaders","map","h","replace","toLowerCase","headerMap","headers","rawHeader","slice","values","rowData","forEach","header","index","value","isNaN","startsWith","Number","error","console"],"sources":["C:/Users/ClowShadow/Desktop/R&C resultados/src/utils/sheetService.js"],"sourcesContent":["export const fetchSheetData = async () => {\n  const sheetUrl = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vQWjDAx17rze56_4sq8mIxro5u1-lTVS6MYe3v6wDqrbG12ARK3b_lPI387qJIfl56fCjHaHEHXQsfi/pub?output=csv\";\n\n  try {\n    const response = await fetch(sheetUrl);\n    if (!response.ok) throw new Error(`Error ${response.status} al cargar datos del CSV.`);\n    \n    const csvData = await response.text();\n    const lines = csvData.split('\\n').filter(line => line.trim() !== '');\n    \n    if (lines.length < 2) throw new Error('La hoja no contiene datos o solo tiene encabezados.');\n    \n    // Mapeo de encabezados de columna a nombres de campo internos\n    // Asegúrate de que estos nombres coincidan con los de tu hoja, en minúsculas\n    const rawHeaders = lines[0].split(',').map(h => h.trim().replace(/\"/g, '').toLowerCase());\n    \n    // Definimos un mapeo explícito de los encabezados de tu hoja a nombres de campo internos\n    // Esto es CRÍTICO para la consistencia\n    const headerMap = {\n      'posición categoria': 'posicion_categoria', // Columna A\n      'dorsal': 'dorsal',\n      'posición genero': 'posicion_genero',     // Columna C\n      'posición general': 'posicion_general',   // Columna D\n      'nombre': 'nombre',\n      'categoria': 'categoria',\n      'tiempo': 'tiempo',                       // Columna G\n      'tiempo chip': 'tiempo_chip',             // Columna H\n      'club': 'club',                           // Columna I\n      'foto_url': 'foto_url',\n      'certificado_url': 'certificado_url',\n      'evento': 'evento',\n      'distancia': 'distancia',                 // Columna M\n      'deporte': 'deporte',\n      // Si tienes vueltas, asegúrate de que los encabezados sean 'vuelta_1', 'vuelta_2', etc.\n      'vuelta_1': 'vuelta_1',\n      'vuelta_2': 'vuelta_2',\n      'vuelta_3': 'vuelta_3',\n      'vuelta_4': 'vuelta_4',\n      'vuelta_5': 'vuelta_5',\n      // Añade más vueltas si es necesario\n    };\n\n    // Crear los encabezados finales usando el mapeo\n    const headers = rawHeaders.map(rawHeader => headerMap[rawHeader] || rawHeader);\n\n    return lines.slice(1).map(line => {\n      const values = line.split(',');\n      const rowData = {};\n      \n      headers.forEach((header, index) => {\n        let value = values[index] ? values[index].trim().replace(/\"/g, '') : '';\n        \n        // Convertir a número si es posible y si no es una URL\n        if (!isNaN(value) && value !== '' && !value.startsWith('http')) {\n          value = Number(value);\n        }\n        \n        rowData[header] = value;\n      });\n      \n      return rowData;\n    });\n    \n  } catch (error) {\n    console.error('Error en fetchSheetData:', error);\n    throw new Error('No se pudieron cargar los datos. Verifica que la hoja sea pública y tenga el formato CSV correcto.');\n  }\n};"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMC,QAAQ,GAAG,gJAAgJ;EAEjK,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;IACtC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,SAASH,QAAQ,CAACI,MAAM,2BAA2B,CAAC;IAEtF,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACrC,MAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IAEpE,IAAIJ,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE,MAAM,IAAIT,KAAK,CAAC,qDAAqD,CAAC;;IAE5F;IACA;IACA,MAAMU,UAAU,GAAGN,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACJ,IAAI,CAAC,CAAC,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;;IAEzF;IACA;IACA,MAAMC,SAAS,GAAG;MAChB,oBAAoB,EAAE,oBAAoB;MAAE;MAC5C,QAAQ,EAAE,QAAQ;MAClB,iBAAiB,EAAE,iBAAiB;MAAM;MAC1C,kBAAkB,EAAE,kBAAkB;MAAI;MAC1C,QAAQ,EAAE,QAAQ;MAClB,WAAW,EAAE,WAAW;MACxB,QAAQ,EAAE,QAAQ;MAAwB;MAC1C,aAAa,EAAE,aAAa;MAAc;MAC1C,MAAM,EAAE,MAAM;MAA4B;MAC1C,UAAU,EAAE,UAAU;MACtB,iBAAiB,EAAE,iBAAiB;MACpC,QAAQ,EAAE,QAAQ;MAClB,WAAW,EAAE,WAAW;MAAkB;MAC1C,SAAS,EAAE,SAAS;MACpB;MACA,UAAU,EAAE,UAAU;MACtB,UAAU,EAAE,UAAU;MACtB,UAAU,EAAE,UAAU;MACtB,UAAU,EAAE,UAAU;MACtB,UAAU,EAAE;MACZ;IACF,CAAC;;IAED;IACA,MAAMC,OAAO,GAAGN,UAAU,CAACC,GAAG,CAACM,SAAS,IAAIF,SAAS,CAACE,SAAS,CAAC,IAAIA,SAAS,CAAC;IAE9E,OAAOb,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC,CAACP,GAAG,CAACJ,IAAI,IAAI;MAChC,MAAMY,MAAM,GAAGZ,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC;MAC9B,MAAMe,OAAO,GAAG,CAAC,CAAC;MAElBJ,OAAO,CAACK,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QACjC,IAAIC,KAAK,GAAGL,MAAM,CAACI,KAAK,CAAC,GAAGJ,MAAM,CAACI,KAAK,CAAC,CAACf,IAAI,CAAC,CAAC,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE;;QAEvE;QACA,IAAI,CAACY,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,KAAK,EAAE,IAAI,CAACA,KAAK,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;UAC9DF,KAAK,GAAGG,MAAM,CAACH,KAAK,CAAC;QACvB;QAEAJ,OAAO,CAACE,MAAM,CAAC,GAAGE,KAAK;MACzB,CAAC,CAAC;MAEF,OAAOJ,OAAO;IAChB,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAM,IAAI5B,KAAK,CAAC,oGAAoG,CAAC;EACvH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}